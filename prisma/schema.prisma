// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  templates     Template[]
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy    User   @relation(fields: [createdById], references: [id])
  createdById  String

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cv {
  id         String      @id @default(uuid())
  name       String
  userId     String
  template   Template    @relation(fields: [templateId], references: [id])
  templateId String
  sections   CvSection[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId])
}

model CvSection {
  id          String @id @default(uuid())
  heading     String
  content     String
  sectionType String
  order       Int
  cv          Cv     @relation(fields: [cvId], references: [id])
  cvId        String

  @@index([cvId])
}

model Template {
  id        String    @id @default(uuid())
  name      String
  userId    String
  sections  Section[]
  cvs       Cv[]
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Section {
  id          String  @id @default(uuid())
  heading     String?
  sectionType String
  order       Int
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String

  @@index([templateId])
}